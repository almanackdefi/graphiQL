{"version":3,"sources":["App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","App","graphiqlRef","useRef","useState","token","setToken","user","setUser","useEffect","listener","onAuthStateChanged","login","a","provider","GoogleAuthProvider","signInWithPopup","result","getIdToken","then","logout","signOut","ref","defaultQuery","fetcher","graphQLParams","fetch","method","headers","Accept","Authorization","body","JSON","stringify","data","json","catch","text","Logo","width","src","photoURL","alt","Toolbar","ToolbarButton","onClick","label","title","Button","current","handlePrettifyQuery","handleToggleHistory","style","display","alignItems","email","ReactDOM","render","document","getElementById"],"mappings":"kQAiBAA,IAASC,cAVqB,CAC5BC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKjB,IAAMC,EAAOT,IAASS,OAqGPC,EA9FH,WACV,IAAMC,EAAcC,mBACpB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAA+B,MAAvD,mBAAOG,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACR,IAAMC,EAAWV,EAAKW,oBAAmB,SAACJ,GAAD,OAAUC,EAAQD,MAE3D,OAAO,WACLG,OAED,CAACV,IAEJ,IAAMY,EAAK,uCAAG,gCAAAC,EAAA,6DACNC,EAAW,IAAIvB,IAASS,KAAKe,mBADvB,SAESf,EAAKgB,gBAAgBF,GAF9B,OAENG,EAFM,OAGZ,UAAAA,EAAOV,YAAP,SAAaW,aAAaC,MAAK,SAACd,GAAD,OAAWC,EAASD,MAHvC,2CAAH,qDAMLe,EAAM,uCAAG,sBAAAP,EAAA,sEACPb,EAAKqB,UADE,OAEbf,EAAS,IAFI,2CAAH,qDAKZ,OACE,eAAC,IAAD,CAEEgB,IAAKpB,EACLqB,aA/BM,sCAgCNC,QAAO,uCAAE,WAAOC,GAAP,eAAAZ,EAAA,sEAEYa,MApCV,OAoC0B,CACjCC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYzB,IAE3B0B,KAAMC,KAAKC,UAAUR,KAThB,cAEDS,EAFC,yBAWAA,EAAKC,OAAOC,OAAM,kBAAMF,EAAKG,WAX7B,2CAAF,sDAJT,UAmBE,cAAC,IAASC,KAAV,UACG/B,EAEC,qBAAKgC,MAAM,KAAKC,IAAG,OAAEjC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,SAAUC,IAAI,SAEzC,qBACEH,MAAM,KACNG,IAAI,WACJF,IAAI,0JAIV,eAAC,IAASG,QAAV,WACGpC,EACC,cAAC,IAASqC,cAAV,CACEC,QAAS,kBAAMzB,KACf0B,MAAM,SACNC,MAAM,aAGR,cAAC,IAASH,cAAV,CACEC,QAAS,kBAAMjC,KACfkC,MAAM,QACNC,MAAM,wBAGV,cAAC,IAASC,OAAV,CACEH,QAAS,+BAAM3C,QAAN,IAAMA,GAAN,UAAMA,EAAa+C,eAAnB,aAAM,EAAsBC,uBACrCJ,MAAM,WACNC,MAAM,kCAER,cAAC,IAASC,OAAV,CACEH,QAAS,+BAAM3C,QAAN,IAAMA,GAAN,UAAMA,EAAa+C,eAAnB,aAAM,EAAsBE,uBACrCL,MAAM,UACNC,MAAM,iBAEPxC,EACC,sBAAK6C,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAA3C,yCACwB/C,QADxB,IACwBA,OADxB,EACwBA,EAAMgD,SAG9B,qBAAKH,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAA3C,sC,OC1GVE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4f0be997.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport GraphiQL from 'graphiql'\nimport 'graphiql/graphiql.min.css'\nimport firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth'\nimport 'firebase/compat/firestore'\n\nexport const firebaseConfig = {\n  apiKey: 'AIzaSyDkzVT14QnkR8FF6xc2S0NWdZ1XUOIkiDk',\n  authDomain: 'graphiql-a15dd.firebaseapp.com',\n  projectId: 'graphiql-a15dd',\n  storageBucket: 'graphiql-a15dd.appspot.com',\n  messagingSenderId: '607730941176',\n  appId: '1:607730941176:web:c14ce9a463d85068e18f0d',\n  measurementId: 'G-35W1CWM10E',\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nconst auth = firebase.auth()\n\nconst ENDPOINT = '/api'\n\nconst inform = `# You must login to query the API\n`\n\nconst App = () => {\n  const graphiqlRef = useRef<GraphiQL>()\n  const [token, setToken] = useState('')\n  const [user, setUser] = useState<firebase.User | null>(null)\n\n  useEffect(() => {\n    const listener = auth.onAuthStateChanged((user) => setUser(user))\n\n    return () => {\n      listener()\n    }\n  }, [auth])\n\n  const login = async () => {\n    const provider = new firebase.auth.GoogleAuthProvider()\n    const result = await auth.signInWithPopup(provider)\n    result.user?.getIdToken().then((token) => setToken(token))\n  }\n\n  const logout = async () => {\n    await auth.signOut()\n    setToken('')\n  }\n\n  return (\n    <GraphiQL\n      // @ts-ignore\n      ref={graphiqlRef}\n      defaultQuery={inform}\n      fetcher={async (graphQLParams) => {\n        // @ts-ignore\n        const data = await fetch(ENDPOINT, {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n          },\n          body: JSON.stringify(graphQLParams),\n        })\n        return data.json().catch(() => data.text())\n      }}\n      // readOnly={!user}\n    >\n      <GraphiQL.Logo>\n        {user ? (\n          // @ts-ignore\n          <img width=\"35\" src={user?.photoURL} alt=\"logo\" />\n        ) : (\n          <img\n            width=\"35\"\n            alt=\"Almanack\"\n            src=\"https://raw.githubusercontent.com/almanackdefi/assets/blob/master/blockchains/smartchain/assets/0x0b5bDC795B30Cf6b24752b10bcd8E85b073A3C08/logo.png\"\n          ></img>\n        )}\n      </GraphiQL.Logo>\n      <GraphiQL.Toolbar>\n        {user ? (\n          <GraphiQL.ToolbarButton\n            onClick={() => logout()}\n            label=\"Logout\"\n            title=\"Sign-out\"\n          ></GraphiQL.ToolbarButton>\n        ) : (\n          <GraphiQL.ToolbarButton\n            onClick={() => login()}\n            label=\"Login\"\n            title=\"Sign-in to continue\"\n          ></GraphiQL.ToolbarButton>\n        )}\n        <GraphiQL.Button\n          onClick={() => graphiqlRef?.current?.handlePrettifyQuery()}\n          label=\"Prettify\"\n          title=\"Prettify Query (Shift-Ctrl-P)\"\n        />\n        <GraphiQL.Button\n          onClick={() => graphiqlRef?.current?.handleToggleHistory()}\n          label=\"History\"\n          title=\"Show History\"\n        />\n        {user ? (\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            You are logged in as {user?.email}\n          </div>\n        ) : (\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            Login to continue\n          </div>\n        )}\n      </GraphiQL.Toolbar>\n    </GraphiQL>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}